import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:multi_vendor_e_commerce_app/Features/home/presentation/manger/product_cubit/product_cubit.dart';
import 'package:multi_vendor_e_commerce_app/core/models/product_model.dart';
import 'package:skeletonizer/skeletonizer.dart';
import '../../../Features/home/data/repos/home_repo_impl.dart';
import '../../../Features/home/presentation/manger/offer_cubit/offer_cubit.dart';
import '../../../generated/l10n.dart';
import 'product_item.dart';

class ProductsSliverGrid extends StatelessWidget {
  final List<ProductModel> products;
  final bool isHome;
  final bool isLoading;


  const ProductsSliverGrid({
    super.key,
    required this.products,
    this.isHome = false,  this.isLoading = false,
  });

  @override
  Widget build(BuildContext context) {
    return SliverPadding(
      padding: const EdgeInsets.all(12),
      sliver: (products.isEmpty)?SliverToBoxAdapter(child: Center(child: Text(S.of(context).no_products_found),),):SliverGrid(
        delegate: SliverChildBuilderDelegate(
          (context, index) => Skeletonizer(
            enabled: isLoading,
            child: ProductItem(
              product: products[index],
              favoriteOnPressed: () async {
                await HomeRepoImpl().addOnlineProductLike(products[index].id);
                await context.read<OfferCubit>().toggleWishlistLocally(
                  products[index].id,
                );
                await context.read<ProductCubit>().toggleWishlistLocally(
                  products[index].id,
                );
              },
            ),
          ),
          childCount: isHome
              ? (products.length < 6 ? products.length : 6)
              : products.length,
        ),
        gridDelegate: SliverGridDelegateWithMaxCrossAxisExtent(
          maxCrossAxisExtent: 220, // قيمة ثابتة معقولة لعرض العنصر
          mainAxisSpacing: 12,
          crossAxisSpacing: 12,
          childAspectRatio: _calculateAspectRatio(context),
        ),
      ),
    );
  }

  double _calculateAspectRatio(BuildContext context) {
    final width = MediaQuery.of(context).size.width;
    // نسبة العرض إلى الارتفاع محسوبة ديناميكيًا
    return width < 350
        ? 0.45
        : width < 600
        ? 0.5
        : 0.55;
  }
}

